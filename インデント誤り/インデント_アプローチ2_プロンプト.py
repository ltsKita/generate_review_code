import sys
import os

# 現在のファイルパスを取得(インデント誤りディレクトリ内で本プログラムを実行するために使用)
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)

from model_download import get_tokenizer_elyza_8b, get_model_elyza_8b
from transformers import pipeline
from langchain_huggingface.llms import HuggingFacePipeline

# 生成AI(elyza 8Bモデル)を使用するための設定を記述
tokenizer_elyza = get_tokenizer_elyza_8b()
model_elyza = get_model_elyza_8b()

pipe_elyza = pipeline(
    "text-generation",
    model=model_elyza,
    tokenizer=tokenizer_elyza,
    device=0
    )
llm_elyza = HuggingFacePipeline(pipeline=pipe_elyza)

# 生成AIにプロンプトを連携
result = llm_elyza(
    """
    指示：
    あなたは優秀なプログラマです。
    xmlファイルに対して、以下の処理を行う文書校閲プログラム作成してください。
    変更内容は元のxmlファイルに上書きする形で反映させてください。

    ステップ1:ファイルの読み込み
    dataディレクトリにあるWordファイルを解凍し、xml形式のファイルを作成します。

    ステップ2:情報の抽出
    xmlファイルからテキストおよびインデント情報を抽出します。
    正常に抽出できているか確認します。

    ステップ3:項目番号形式を修正するルールの作成
    以下の形式となっていない項目番号に対して修正を行う正規表現ルールを作成してください。
    数字やアルファベットは任意のものが入ります。括弧やピリオドを下記の形式に合わせてください。
    具体的には括弧、スペース、全角半角を下記のものに揃えるルールを作成してください。
    ※ダブルクォーテーションでスペースの情報を記載しているが、その直前までが項目番号です。
    ----------------------------------------
    1.　"項目番号の後ろは全角スペース"
    1.1　"項目番号の後ろは全角スペース"
    1.1.1　"項目番号の後ろは全角スペース"
    1.1.1.1　"項目番号の後ろは全角スペース"
    (1) "項目番号の後ろは半角スペース"
    ａ．"項目番号の後ろはスペースなし（英字及び．は全角）"
    (a) "項目番号の後ろは半角スペース"
    (a-1) "項目番号の後ろは半角スペース"
    (a-1-1) "項目番号の後ろは半角スペース"
    ----------------------------------------

    ステップ4:項目番号の連番をを修正するルールの作成
    以下のそれぞれの項目番号について、連番となっていないものを検知して連番となるように修正を行う正規表現ルールを作成してください。
    数字やアルファベットは任意のものが入ります。括弧やピリオドを下記の形式に合わせてください。
    ここで、最初に記載してあるものが最も大きな分類として使用される項目番号であり、順に小さな分類の項目番号となっている。
    大きな分類の項目番号が1進むにつれ小さな分類の項目番号も連動して連番が適用される。
    例えば「1.　,2.　,3.　・・・,1.1　,1.2　,1.3　・・・,1.1.1　,1.1.2　,1.1.3　・・・,1.1.1.1　,1.1.1.2　,1.1.1.3　,・・・」であれば、より大きな分類の項目番号の変更に連動して一番右の番号が1だけ進む形式であり、
    それ以外のものであれば、より大きな分類の項目番号の変更に連動して初期値が適用される形式となる。
    ----------------------------------------
    1.　,2.　,3.　・・・
    1.1　,1.2　,1.3　・・・
    1.1.1　,1.1.2　,1.1.3　・・・
    1.1.1.1　,1.1.1.2　,1.1.1.3　,・・・
    (1)，(2)，(3) ・・・
    ａ．,ｂ．,ｃ．・・・
    (a)，(b)，(c)・・・
    (a-1)，(a-2)，(a-3) ・・・
    (a-1-1)，(a-1-2)，(a-1-3) ・・・
    ----------------------------------------

    ステップ5:項目番号のインデントを修正するルールの作成
    以下のそれぞれの項目番号について、先頭に指定のインデントが適用されていないものを検知して修正を行う正規表現ルールを作成してください。
    数字やアルファベットは任意のものが入ります。括弧やピリオドを下記の形式に合わせてください。
    また、それぞれの項目番号に続く通常の段落は指定のインデントに加えて先頭文字に対して1文字分のインデントが適用される正規表現ルールを作成してください。
    ※先頭にインデントの文字数を記載しているが、その直後に続くものがそれぞれの項目番号です。
    ----------------------------------------
    "インデント0文字"1.　
    "インデント0文字"1.1　
    "インデント0文字"1.1.1　
    "インデント0文字"1.1.1.1　
    "インデント1文字"(1)  
    "インデント2文字"ａ．
    "インデント3文字"(a) 
    "インデント4文字"(a-1) 
    "インデント5文字"(a-1-1) 
    ----------------------------------------

    ステップ6:作成したルールの適用
    抽出した要素に対してステップ3,4,5で作成した正規表現ルールを適用し、修正を行なってください。

    ステップ7:ハイライト付与
    今回の処理で変更があったテキストにはハイライト(黄色)を付与してしてください。

    ステップ8:ファイル出力
    修正後のテキストを確認し、最終的な出力結果を元のxmlファイルに反映します。
    修正を行なったxmlファイルから新しいWordファイルを作成します。

    回答：
    """
)

# プロンプトの内容を踏まえ、生成AIがコマンドライン上にプログラムを生成する
answer = result.split("回答：")[-1].strip()
print("-"*10 + "判定結果" + "-"*10)
print(answer)
